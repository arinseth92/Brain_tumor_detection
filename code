import streamlit as st
from tensorflow.keras.models import load_model
from keras.preprocessing.image import load_img, img_to_array
import numpy as np
import tempfile
import os

# Load model
MODEL_PATH = "model.h5"
model = load_model(MODEL_PATH)

# Class labels
class_labels = ['pituitary', 'glioma', 'notumor', 'meningioma']

# Prediction function
def predict_tumor(image_path):
    IMAGE_SIZE = 128
    img = load_img(image_path, target_size=(IMAGE_SIZE, IMAGE_SIZE))
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    predictions = model.predict(img_array)
    predicted_class_index = np.argmax(predictions, axis=1)[0]
    confidence_score = np.max(predictions, axis=1)[0]

    if class_labels[predicted_class_index] == 'notumor':
        return "No Tumor", confidence_score
    else:
        return f"Tumor: {class_labels[predicted_class_index]}", confidence_score

# Streamlit UI
st.set_page_config(page_title="MRI Tumor Detection", layout="centered")

st.title("üß† MRI Tumor Detection System")
st.markdown("Upload an MRI image to detect if there is a tumor and its type.")

# File uploader
uploaded_file = st.file_uploader("Choose an MRI Image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Save to temporary file
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
    temp_file.write(uploaded_file.read())
    temp_file_path = temp_file.name

    # Show uploaded image
    st.image(temp_file_path, caption="Uploaded MRI Image", use_column_width=True)

    # Run prediction
    if st.button("üîç Detect Tumor"):
        result, confidence = predict_tumor(temp_file_path)
        st.success(f"### {result}")
        st.info(f"**Confidence:** {confidence*100:.2f}%")

        # Clean up temp file after use
        os.remove(temp_file_path)
